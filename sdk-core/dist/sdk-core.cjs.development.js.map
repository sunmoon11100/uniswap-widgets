{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\r\n  MAINNET = 1,\r\n  GOERLI = 5,\r\n  SEPOLIA = 11155111,\r\n  OPTIMISM = 10,\r\n  OPTIMISM_GOERLI = 420,\r\n  OPTIMISM_SEPOLIA = 11155420,\r\n  ARBITRUM_ONE = 42161,\r\n  ARBITRUM_GOERLI = 421613,\r\n  ARBITRUM_SEPOLIA = 421614,\r\n  POLYGON = 137,\r\n  POLYGON_MUMBAI = 80001,\r\n  CELO = 42220,\r\n  CELO_ALFAJORES = 44787,\r\n  GNOSIS = 100,\r\n  MOONBEAM = 1284,\r\n  BNB = 56,\r\n  AVALANCHE = 43114,\r\n  BASE_GOERLI = 84531,\r\n  BASE = 8453,\r\n  ZORA = 7777777,\r\n  ZORA_SEPOLIA = 999999999,\r\n  ROOTSTOCK = 30,\r\n  BLAST = 81457,\r\n  COSTON2 = 114\r\n}\r\n\r\nexport const SUPPORTED_CHAINS = [\r\n  ChainId.MAINNET,\r\n  ChainId.OPTIMISM,\r\n  ChainId.OPTIMISM_GOERLI,\r\n  ChainId.OPTIMISM_SEPOLIA,\r\n  ChainId.ARBITRUM_ONE,\r\n  ChainId.ARBITRUM_GOERLI,\r\n  ChainId.ARBITRUM_SEPOLIA,\r\n  ChainId.POLYGON,\r\n  ChainId.POLYGON_MUMBAI,\r\n  ChainId.GOERLI,\r\n  ChainId.SEPOLIA,\r\n  ChainId.CELO_ALFAJORES,\r\n  ChainId.CELO,\r\n  ChainId.BNB,\r\n  ChainId.AVALANCHE,\r\n  ChainId.BASE,\r\n  ChainId.BASE_GOERLI,\r\n  ChainId.ZORA,\r\n  ChainId.ZORA_SEPOLIA,\r\n  ChainId.ROOTSTOCK,\r\n  ChainId.BLAST,\r\n  ChainId.COSTON2\r\n] as const\r\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\r\n\r\nexport enum NativeCurrencyName {\r\n  // Strings match input for CLI\r\n  ETHER = 'ETH',\r\n  MATIC = 'MATIC',\r\n  CELO = 'CELO',\r\n  GNOSIS = 'XDAI',\r\n  MOONBEAM = 'GLMR',\r\n  BNB = 'BNB',\r\n  AVAX = 'AVAX',\r\n  ROOTSTOCK = 'RBTC',\r\n  COSTON2 = 'C2FLR'\r\n}\r\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\r\n\r\ntype AddressMap = { [chainId: number]: string }\r\n\r\ntype ChainAddresses = {\r\n  v3CoreFactoryAddress: string\r\n  multicallAddress: string\r\n  quoterAddress: string\r\n  v3MigratorAddress?: string\r\n  nonfungiblePositionManagerAddress?: string\r\n  tickLensAddress?: string\r\n  swapRouter02Address?: string\r\n  v1MixedRouteQuoterAddress?: string\r\n}\r\n\r\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\r\n\r\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\r\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = address\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\r\n  ChainId.OPTIMISM,\r\n  ChainId.ARBITRUM_ONE,\r\n  ChainId.POLYGON,\r\n  ChainId.POLYGON_MUMBAI,\r\n  ChainId.SEPOLIA\r\n])\r\n\r\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\r\n\r\n/**\r\n * @deprecated use V2_FACTORY_ADDRESSES instead\r\n */\r\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\r\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\r\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\r\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\r\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\r\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\r\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\r\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\r\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\r\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\r\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\r\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070'\r\n}\r\n/**\r\n * @deprecated use V2_ROUTER_ADDRESSES instead\r\n */\r\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\r\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\r\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\r\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\r\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\r\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035'\r\n}\r\n\r\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\r\nconst DEFAULT_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\r\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\r\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\r\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\r\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\r\n}\r\nconst MAINNET_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\r\n}\r\nconst GOERLI_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\r\n}\r\n\r\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\r\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\r\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\r\n}\r\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\r\n\r\n// celo v3 addresses\r\nconst CELO_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\r\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\r\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\r\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\r\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\r\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\r\n}\r\n\r\n// BNB v3 addresses\r\nconst BNB_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\r\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\r\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\r\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\r\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\r\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\r\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\r\n}\r\n\r\n// optimism goerli addresses\r\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\r\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\r\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\r\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\r\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\r\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\r\n}\r\n\r\n// optimism sepolia addresses\r\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\r\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\r\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\r\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\r\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\r\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\r\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'\r\n}\r\n\r\n// arbitrum goerli v3 addresses\r\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\r\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\r\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\r\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\r\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\r\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\r\n}\r\n\r\n// arbitrum sepolia v3 addresses\r\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\r\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\r\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\r\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\r\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\r\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\r\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'\r\n}\r\n\r\n// sepolia v3 addresses\r\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\r\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\r\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\r\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\r\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\r\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\r\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E'\r\n}\r\n\r\n// Avalanche v3 addresses\r\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\r\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\r\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\r\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\r\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\r\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\r\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\r\n}\r\n\r\nconst BASE_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\r\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\r\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\r\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\r\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\r\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\r\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\r\n}\r\n\r\n// Base Goerli v3 addresses\r\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\r\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\r\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\r\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\r\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\r\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\r\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\r\n}\r\n\r\nconst ZORA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\r\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\r\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\r\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\r\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\r\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\r\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'\r\n}\r\n\r\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\r\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\r\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\r\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\r\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\r\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'\r\n}\r\n\r\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\r\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\r\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\r\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\r\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\r\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\r\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'\r\n}\r\n\r\nconst BLAST_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\r\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\r\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\r\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\r\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\r\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\r\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'\r\n}\r\n\r\nconst COSTON2_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x1Ee0945ae6960e794eC66a37BdE4a6b4ECEa45C5',\r\n  multicallAddress: '0xb1ae7C7077A2bC42Db7230848C1745BCf56Bfa52',\r\n  quoterAddress: '0xA7fCe90938063596fd255576e2Bf17C9205699E1',\r\n  v3MigratorAddress: '0xe221F9623313b2DfDB924eAd983884Affe6Dd064',\r\n  nonfungiblePositionManagerAddress: '0xfccE552D37E5D72BEbb42b41f294064015acA89D',\r\n  tickLensAddress: '0x49ba20f4d9e0667b4BD53563F2dD4f7410eA6AB1',\r\n  swapRouter02Address: '0x7cea0086D05d739c70dee1B3973315911bEb1080'\r\n}\r\n\r\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\r\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\r\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\r\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\r\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\r\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\r\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\r\n  [ChainId.CELO]: CELO_ADDRESSES,\r\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\r\n  [ChainId.BNB]: BNB_ADDRESSES,\r\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\r\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\r\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\r\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\r\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\r\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\r\n  [ChainId.BASE]: BASE_ADDRESSES,\r\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\r\n  [ChainId.ZORA]: ZORA_ADDRESSES,\r\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\r\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\r\n  [ChainId.BLAST]: BLAST_ADDRESSES,\r\n  [ChainId.COSTON2]: COSTON2_ADDRESSES\r\n}\r\n\r\n/* V3 Contract Addresses */\r\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\r\n    if (v3MigratorAddress) {\r\n      memo[chainId] = v3MigratorAddress\r\n    }\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const MULTICALL_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\r\n    return memo\r\n  }, {})\r\n}\r\n\r\n/**\r\n * The oldest V0 governance address\r\n */\r\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\r\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\r\n)\r\n/**\r\n * The older V1 governance address\r\n */\r\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\r\n}\r\n/**\r\n * The latest governor bravo that is currently admin of timelock\r\n */\r\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\r\n}\r\n\r\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\r\n\r\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\r\n}\r\n\r\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\r\n}\r\n\r\nexport const QUOTER_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\r\n    if (nonfungiblePositionManagerAddress) {\r\n      memo[chainId] = nonfungiblePositionManagerAddress\r\n    }\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\r\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\r\n}\r\n\r\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\r\n}\r\n\r\nexport const TICK_LENS_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\r\n    if (tickLensAddress) {\r\n      memo[chainId] = tickLensAddress\r\n    }\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\r\n  if (v1MixedRouteQuoterAddress) {\r\n    memo[chainId] = v1MixedRouteQuoterAddress\r\n  }\r\n  return memo\r\n}, {})\r\n\r\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\r\n  if (SUPPORTED_CHAINS.includes(chainId)) {\r\n    const id = chainId as SupportedChainsType\r\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\r\n  }\r\n  return ''\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | string | number\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { Currency } from '../currency'\r\nimport { Token } from '../token'\r\nimport { Fraction } from './fraction'\r\nimport _Big from 'big.js'\r\n\r\nimport toFormat from 'toformat'\r\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\r\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\r\n  ) {\r\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\r\n\r\n    if (args.length === 4) {\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator\r\n      ]\r\n    }\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { Currency } from './currency'\r\nimport { Token } from './token'\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class BaseCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean\r\n  /**\r\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.chainId = chainId\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean\r\n\r\n  /**\r\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\r\n   * implement this to be used in Uniswap\r\n   */\r\n  public abstract get wrapped(): Token\r\n}\r\n","import { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport abstract class NativeCurrency extends BaseCurrency {\r\n  public readonly isNative: true = true\r\n  public readonly isToken: false = false\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\n\r\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    return getAddress(address)\r\n  } catch (error) {\r\n    throw new Error(`${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\r\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\r\n\r\n/**\r\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function checkValidAddress(address: string): string {\r\n  if (startsWith0xLen42HexRegex.test(address)) {\r\n    return address\r\n  }\r\n\r\n  throw new Error(`${address} is not a valid address.`)\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport invariant from 'tiny-invariant'\r\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\r\nimport { BaseCurrency } from './baseCurrency'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends BaseCurrency {\r\n  public readonly isNative: false = false\r\n  public readonly isToken: true = true\r\n\r\n  /**\r\n   * The contract address on the chain on which this token lives\r\n   */\r\n  public readonly address: string\r\n\r\n  /**\r\n   * Relevant for fee-on-transfer (FOT) token taxes,\r\n   * Not every ERC20 token is FOT token, so this field is optional\r\n   */\r\n  public readonly buyFeeBps?: BigNumber\r\n  public readonly sellFeeBps?: BigNumber\r\n\r\n  /**\r\n   *\r\n   * @param chainId {@link BaseCurrency#chainId}\r\n   * @param address The contract address on the chain on which this token lives\r\n   * @param decimals {@link BaseCurrency#decimals}\r\n   * @param symbol {@link BaseCurrency#symbol}\r\n   * @param name {@link BaseCurrency#name}\r\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\r\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\r\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\r\n   */\r\n  public constructor(\r\n    chainId: number,\r\n    address: string,\r\n    decimals: number,\r\n    symbol?: string,\r\n    name?: string,\r\n    bypassChecksum?: boolean,\r\n    buyFeeBps?: BigNumber,\r\n    sellFeeBps?: BigNumber\r\n  ) {\r\n    super(chainId, decimals, symbol, name)\r\n    if (bypassChecksum) {\r\n      this.address = checkValidAddress(address)\r\n    } else {\r\n      this.address = validateAndParseAddress(address)\r\n    }\r\n    if (buyFeeBps) {\r\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\r\n    }\r\n    if (sellFeeBps) {\r\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\r\n    }\r\n    this.buyFeeBps = buyFeeBps\r\n    this.sellFeeBps = sellFeeBps\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this\r\n  }\r\n}\r\n","import { Token } from './token'\r\n\r\n/**\r\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\r\n */\r\nexport const WETH9: { [chainId: number]: Token } = {\r\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\r\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\r\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\r\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\r\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  [11155420]: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\r\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\r\n  [421614]: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\r\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\r\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { Currency } from './currency'\r\nimport { NativeCurrency } from './nativeCurrency'\r\nimport { Token } from './token'\r\nimport { WETH9 } from './weth9'\r\n\r\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\r\nexport class Ether extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ETH', 'Ether')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const weth9 = WETH9[this.chainId]\r\n    invariant(!!weth9, 'WRAPPED')\r\n    return weth9\r\n  }\r\n\r\n  private static _etherCache: { [chainId: number]: Ether } = {}\r\n\r\n  public static onChain(chainId: number): Ether {\r\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\nconst ONE = JSBI.BigInt(1)\r\nconst TWO = JSBI.BigInt(2)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","COSTON2","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","COSTON2_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","constructor","numerator","denominator","tryParseFraction","fractionish","Error","quotient","divide","remainder","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","process","invariant","set","precision","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","asFraction","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","wrapped","isToken","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","weth9","onChain","_etherCache","isNative","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}