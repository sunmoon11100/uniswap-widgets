{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\r\n  MAINNET = 1,\r\n  GOERLI = 5,\r\n  SEPOLIA = 11155111,\r\n  OPTIMISM = 10,\r\n  OPTIMISM_GOERLI = 420,\r\n  OPTIMISM_SEPOLIA = 11155420,\r\n  ARBITRUM_ONE = 42161,\r\n  ARBITRUM_GOERLI = 421613,\r\n  ARBITRUM_SEPOLIA = 421614,\r\n  POLYGON = 137,\r\n  POLYGON_MUMBAI = 80001,\r\n  CELO = 42220,\r\n  CELO_ALFAJORES = 44787,\r\n  GNOSIS = 100,\r\n  MOONBEAM = 1284,\r\n  BNB = 56,\r\n  AVALANCHE = 43114,\r\n  BASE_GOERLI = 84531,\r\n  BASE = 8453,\r\n  ZORA = 7777777,\r\n  ZORA_SEPOLIA = 999999999,\r\n  ROOTSTOCK = 30,\r\n  BLAST = 81457,\r\n  COSTON2 = 114\r\n}\r\n\r\nexport const SUPPORTED_CHAINS = [\r\n  ChainId.MAINNET,\r\n  ChainId.OPTIMISM,\r\n  ChainId.OPTIMISM_GOERLI,\r\n  ChainId.OPTIMISM_SEPOLIA,\r\n  ChainId.ARBITRUM_ONE,\r\n  ChainId.ARBITRUM_GOERLI,\r\n  ChainId.ARBITRUM_SEPOLIA,\r\n  ChainId.POLYGON,\r\n  ChainId.POLYGON_MUMBAI,\r\n  ChainId.GOERLI,\r\n  ChainId.SEPOLIA,\r\n  ChainId.CELO_ALFAJORES,\r\n  ChainId.CELO,\r\n  ChainId.BNB,\r\n  ChainId.AVALANCHE,\r\n  ChainId.BASE,\r\n  ChainId.BASE_GOERLI,\r\n  ChainId.ZORA,\r\n  ChainId.ZORA_SEPOLIA,\r\n  ChainId.ROOTSTOCK,\r\n  ChainId.BLAST,\r\n  ChainId.COSTON2\r\n] as const\r\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\r\n\r\nexport enum NativeCurrencyName {\r\n  // Strings match input for CLI\r\n  ETHER = 'ETH',\r\n  MATIC = 'MATIC',\r\n  CELO = 'CELO',\r\n  GNOSIS = 'XDAI',\r\n  MOONBEAM = 'GLMR',\r\n  BNB = 'BNB',\r\n  AVAX = 'AVAX',\r\n  ROOTSTOCK = 'RBTC',\r\n  COSTON2 = 'C2FLR'\r\n}\r\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\r\n\r\ntype AddressMap = { [chainId: number]: string }\r\n\r\ntype ChainAddresses = {\r\n  v3CoreFactoryAddress: string\r\n  multicallAddress: string\r\n  quoterAddress: string\r\n  v3MigratorAddress?: string\r\n  nonfungiblePositionManagerAddress?: string\r\n  tickLensAddress?: string\r\n  swapRouter02Address?: string\r\n  v1MixedRouteQuoterAddress?: string\r\n}\r\n\r\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\r\n\r\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\r\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = address\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\r\n  ChainId.OPTIMISM,\r\n  ChainId.ARBITRUM_ONE,\r\n  ChainId.POLYGON,\r\n  ChainId.POLYGON_MUMBAI,\r\n  ChainId.SEPOLIA\r\n])\r\n\r\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\r\n\r\n/**\r\n * @deprecated use V2_FACTORY_ADDRESSES instead\r\n */\r\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\r\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\r\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\r\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\r\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\r\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\r\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\r\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\r\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\r\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\r\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\r\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070'\r\n}\r\n/**\r\n * @deprecated use V2_ROUTER_ADDRESSES instead\r\n */\r\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\r\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\r\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\r\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\r\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\r\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\r\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035'\r\n}\r\n\r\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\r\nconst DEFAULT_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\r\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\r\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\r\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\r\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\r\n}\r\nconst MAINNET_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\r\n}\r\nconst GOERLI_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\r\n}\r\n\r\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\r\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\r\n  ...DEFAULT_ADDRESSES,\r\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\r\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\r\n}\r\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\r\n\r\n// celo v3 addresses\r\nconst CELO_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\r\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\r\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\r\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\r\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\r\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\r\n}\r\n\r\n// BNB v3 addresses\r\nconst BNB_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\r\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\r\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\r\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\r\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\r\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\r\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\r\n}\r\n\r\n// optimism goerli addresses\r\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\r\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\r\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\r\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\r\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\r\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\r\n}\r\n\r\n// optimism sepolia addresses\r\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\r\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\r\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\r\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\r\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\r\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\r\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'\r\n}\r\n\r\n// arbitrum goerli v3 addresses\r\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\r\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\r\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\r\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\r\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\r\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\r\n}\r\n\r\n// arbitrum sepolia v3 addresses\r\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\r\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\r\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\r\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\r\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\r\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\r\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'\r\n}\r\n\r\n// sepolia v3 addresses\r\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\r\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\r\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\r\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\r\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\r\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\r\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E'\r\n}\r\n\r\n// Avalanche v3 addresses\r\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\r\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\r\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\r\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\r\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\r\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\r\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\r\n}\r\n\r\nconst BASE_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\r\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\r\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\r\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\r\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\r\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\r\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\r\n}\r\n\r\n// Base Goerli v3 addresses\r\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\r\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\r\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\r\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\r\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\r\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\r\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\r\n}\r\n\r\nconst ZORA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\r\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\r\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\r\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\r\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\r\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\r\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'\r\n}\r\n\r\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\r\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\r\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\r\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\r\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\r\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'\r\n}\r\n\r\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\r\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\r\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\r\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\r\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\r\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\r\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'\r\n}\r\n\r\nconst BLAST_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\r\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\r\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\r\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\r\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\r\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\r\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'\r\n}\r\n\r\nconst COSTON2_ADDRESSES: ChainAddresses = {\r\n  v3CoreFactoryAddress: '0x1Ee0945ae6960e794eC66a37BdE4a6b4ECEa45C5',\r\n  multicallAddress: '0xb1ae7C7077A2bC42Db7230848C1745BCf56Bfa52',\r\n  quoterAddress: '0xA7fCe90938063596fd255576e2Bf17C9205699E1',\r\n  v3MigratorAddress: '0xe221F9623313b2DfDB924eAd983884Affe6Dd064',\r\n  nonfungiblePositionManagerAddress: '0xfccE552D37E5D72BEbb42b41f294064015acA89D',\r\n  tickLensAddress: '0x49ba20f4d9e0667b4BD53563F2dD4f7410eA6AB1',\r\n  swapRouter02Address: '0x7cea0086D05d739c70dee1B3973315911bEb1080'\r\n}\r\n\r\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\r\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\r\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\r\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\r\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\r\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\r\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\r\n  [ChainId.CELO]: CELO_ADDRESSES,\r\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\r\n  [ChainId.BNB]: BNB_ADDRESSES,\r\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\r\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\r\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\r\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\r\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\r\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\r\n  [ChainId.BASE]: BASE_ADDRESSES,\r\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\r\n  [ChainId.ZORA]: ZORA_ADDRESSES,\r\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\r\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\r\n  [ChainId.BLAST]: BLAST_ADDRESSES,\r\n  [ChainId.COSTON2]: COSTON2_ADDRESSES\r\n}\r\n\r\n/* V3 Contract Addresses */\r\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\r\n    if (v3MigratorAddress) {\r\n      memo[chainId] = v3MigratorAddress\r\n    }\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const MULTICALL_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\r\n    return memo\r\n  }, {})\r\n}\r\n\r\n/**\r\n * The oldest V0 governance address\r\n */\r\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\r\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\r\n)\r\n/**\r\n * The older V1 governance address\r\n */\r\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\r\n}\r\n/**\r\n * The latest governor bravo that is currently admin of timelock\r\n */\r\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\r\n}\r\n\r\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\r\n\r\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\r\n}\r\n\r\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\r\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\r\n}\r\n\r\nexport const QUOTER_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\r\n    if (nonfungiblePositionManagerAddress) {\r\n      memo[chainId] = nonfungiblePositionManagerAddress\r\n    }\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\r\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\r\n}\r\n\r\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\r\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\r\n}\r\n\r\nexport const TICK_LENS_ADDRESSES: AddressMap = {\r\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\r\n    if (tickLensAddress) {\r\n      memo[chainId] = tickLensAddress\r\n    }\r\n    return memo\r\n  }, {})\r\n}\r\n\r\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\r\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\r\n  if (v1MixedRouteQuoterAddress) {\r\n    memo[chainId] = v1MixedRouteQuoterAddress\r\n  }\r\n  return memo\r\n}, {})\r\n\r\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\r\n  if (SUPPORTED_CHAINS.includes(chainId)) {\r\n    const id = chainId as SupportedChainsType\r\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\r\n  }\r\n  return ''\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | string | number\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { Currency } from '../currency'\r\nimport { Token } from '../token'\r\nimport { Fraction } from './fraction'\r\nimport _Big from 'big.js'\r\n\r\nimport toFormat from 'toformat'\r\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\r\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\r\n  ) {\r\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\r\n\r\n    if (args.length === 4) {\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator\r\n      ]\r\n    }\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { Currency } from './currency'\r\nimport { Token } from './token'\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class BaseCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean\r\n  /**\r\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.chainId = chainId\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean\r\n\r\n  /**\r\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\r\n   * implement this to be used in Uniswap\r\n   */\r\n  public abstract get wrapped(): Token\r\n}\r\n","import { BaseCurrency } from './baseCurrency'\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport abstract class NativeCurrency extends BaseCurrency {\r\n  public readonly isNative: true = true\r\n  public readonly isToken: false = false\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\n\r\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    return getAddress(address)\r\n  } catch (error) {\r\n    throw new Error(`${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\r\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\r\n\r\n/**\r\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\r\n * @param address the unchecksummed hex address\r\n */\r\nexport function checkValidAddress(address: string): string {\r\n  if (startsWith0xLen42HexRegex.test(address)) {\r\n    return address\r\n  }\r\n\r\n  throw new Error(`${address} is not a valid address.`)\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport invariant from 'tiny-invariant'\r\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\r\nimport { BaseCurrency } from './baseCurrency'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends BaseCurrency {\r\n  public readonly isNative: false = false\r\n  public readonly isToken: true = true\r\n\r\n  /**\r\n   * The contract address on the chain on which this token lives\r\n   */\r\n  public readonly address: string\r\n\r\n  /**\r\n   * Relevant for fee-on-transfer (FOT) token taxes,\r\n   * Not every ERC20 token is FOT token, so this field is optional\r\n   */\r\n  public readonly buyFeeBps?: BigNumber\r\n  public readonly sellFeeBps?: BigNumber\r\n\r\n  /**\r\n   *\r\n   * @param chainId {@link BaseCurrency#chainId}\r\n   * @param address The contract address on the chain on which this token lives\r\n   * @param decimals {@link BaseCurrency#decimals}\r\n   * @param symbol {@link BaseCurrency#symbol}\r\n   * @param name {@link BaseCurrency#name}\r\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\r\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\r\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\r\n   */\r\n  public constructor(\r\n    chainId: number,\r\n    address: string,\r\n    decimals: number,\r\n    symbol?: string,\r\n    name?: string,\r\n    bypassChecksum?: boolean,\r\n    buyFeeBps?: BigNumber,\r\n    sellFeeBps?: BigNumber\r\n  ) {\r\n    super(chainId, decimals, symbol, name)\r\n    if (bypassChecksum) {\r\n      this.address = checkValidAddress(address)\r\n    } else {\r\n      this.address = validateAndParseAddress(address)\r\n    }\r\n    if (buyFeeBps) {\r\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\r\n    }\r\n    if (sellFeeBps) {\r\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\r\n    }\r\n    this.buyFeeBps = buyFeeBps\r\n    this.sellFeeBps = sellFeeBps\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this\r\n  }\r\n}\r\n","import { Token } from './token'\r\n\r\n/**\r\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\r\n */\r\nexport const WETH9: { [chainId: number]: Token } = {\r\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\r\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\r\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\r\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\r\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n  [11155420]: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\r\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\r\n  [421614]: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\r\n\r\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\r\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\r\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { Currency } from './currency'\r\nimport { NativeCurrency } from './nativeCurrency'\r\nimport { Token } from './token'\r\nimport { WETH9 } from './weth9'\r\n\r\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\r\nexport class Ether extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ETH', 'Ether')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const weth9 = WETH9[this.chainId]\r\n    invariant(!!weth9, 'WRAPPED')\r\n    return weth9\r\n  }\r\n\r\n  private static _etherCache: { [chainId: number]: Ether } = {}\r\n\r\n  public static onChain(chainId: number): Ether {\r\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\nconst ONE = JSBI.BigInt(1)\r\nconst TWO = JSBI.BigInt(2)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","COSTON2","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","V2_FACTORY_ADDRESSES","[object Object]","V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","CELO_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","swapRouter02Address","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","GOVERNANCE_BRAVO_ADDRESSES","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","ARGENT_WALLET_DETECTOR_ADDRESS","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","constructor","numerator","denominator","this","fractionish","Error","quotient","divide","remainder","invert","add","other","otherParsed","tryParseFraction","equal","multiply","subtract","lessThan","equalTo","greaterThan","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","asFraction","CurrencyAmount","currency","super","lessThanOrEqual","decimalScale","exponentiate","decimals","rawAmount","equals","added","fromFractionalAmount","subtracted","multiplied","divided","toExact","wrapped","isToken","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","Token","bypassChecksum","buyFeeBps","sellFeeBps","test","checkValidAddress","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","1","3","4","5","42","10","69","11155420","42161","421611","421614","8453","56","137","43114","Ether","weth9","_etherCache","isNative","MAX_SAFE_INTEGER","ZERO","ONE","TWO","includes","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}